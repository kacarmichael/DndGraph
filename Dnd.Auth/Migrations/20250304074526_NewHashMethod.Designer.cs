// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dnd.Auth.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250304074526_NewHashMethod")]
    partial class NewHashMethod
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dnd.Auth.Models.Implementations.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FailedLogins")
                        .HasColumnType("integer");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordResetToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuthUser", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2000, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@localhost",
                            FailedLogins = 0,
                            HashedPassword = "srnvZuXQabFO5XRaZrOA1oNjoL4J+Nwyxw4z9z6AYAc=",
                            LastLogin = new DateTime(2000, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            Locked = false,
                            PasswordResetToken = "Not Implemented Yet",
                            Role = "Admin",
                            Salt = "YskO8jhgbB4LC8AyPJSzyA==",
                            Updated = new DateTime(2000, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            Username = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
