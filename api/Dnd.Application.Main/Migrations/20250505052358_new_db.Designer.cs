// <auto-generated />
using System;
using Dnd.Application.Main.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dnd.Application.Main.Migrations
{
    [DbContext(typeof(DndDbContext))]
    [Migration("20250505052358_new_db")]
    partial class new_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dnd.Application.Main.Models.Campaigns.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("DungeonMasterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Campaigns.CampaignSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CampaignSessions");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Characters.CharacterStats", b =>
                {
                    b.Property<int>("StatBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatBlockId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("CharismaScore")
                        .HasColumnType("integer");

                    b.Property<int>("ConstitutionScore")
                        .HasColumnType("integer");

                    b.Property<int>("DexterityScore")
                        .HasColumnType("integer");

                    b.Property<int>("IntelligenceScore")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("integer");

                    b.Property<int>("StrengthScore")
                        .HasColumnType("integer");

                    b.Property<int>("WisdomScore")
                        .HasColumnType("integer");

                    b.HasKey("StatBlockId");

                    b.ToTable("CharacterStats", (string)null);
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Characters.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpellcastingAbility")
                        .HasColumnType("text");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            Name = "Barbarian",
                            SpellcastingAbility = "Strength"
                        },
                        new
                        {
                            ClassId = 2,
                            Name = "Bard",
                            SpellcastingAbility = "Charisma"
                        },
                        new
                        {
                            ClassId = 3,
                            Name = "Cleric",
                            SpellcastingAbility = "Wisdom"
                        },
                        new
                        {
                            ClassId = 4,
                            Name = "Druid",
                            SpellcastingAbility = "Wisdom"
                        },
                        new
                        {
                            ClassId = 5,
                            Name = "Fighter",
                            SpellcastingAbility = "Strength"
                        },
                        new
                        {
                            ClassId = 6,
                            Name = "Monk",
                            SpellcastingAbility = "Dexterity"
                        },
                        new
                        {
                            ClassId = 7,
                            Name = "Paladin",
                            SpellcastingAbility = "Charisma"
                        },
                        new
                        {
                            ClassId = 8,
                            Name = "Ranger",
                            SpellcastingAbility = "Dexterity"
                        },
                        new
                        {
                            ClassId = 9,
                            Name = "Rogue",
                            SpellcastingAbility = "Dexterity"
                        },
                        new
                        {
                            ClassId = 10,
                            Name = "Sorcerer",
                            SpellcastingAbility = "Charisma"
                        },
                        new
                        {
                            ClassId = 11,
                            Name = "Warlock",
                            SpellcastingAbility = "Charisma"
                        },
                        new
                        {
                            ClassId = 12,
                            Name = "Wizard",
                            SpellcastingAbility = "Intelligence"
                        },
                        new
                        {
                            ClassId = 13,
                            Name = "Artificer",
                            SpellcastingAbility = "Intelligence"
                        });
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Intermediate.CharacterClass", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("Levels")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "ClassId");

                    b.ToTable("CharacterClasses", (string)null);
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Intermediate.UserCharacterCampaign", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CharacterId", "CampaignId");

                    b.ToTable("UserCharacterCampaigns", (string)null);
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.DiceRollBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RollType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rolls");

                    b.HasDiscriminator<string>("RollType").HasValue("DiceRollBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Users.DomainUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.AbilityCheckRoll", b =>
                {
                    b.HasBaseType("Dnd.Application.Main.Models.Rolls.DiceRollBase");

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("abilityCheck");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.DamageRoll", b =>
                {
                    b.HasBaseType("Dnd.Application.Main.Models.Rolls.DiceRollBase");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("damageRoll");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.MeleeAttackRoll", b =>
                {
                    b.HasBaseType("Dnd.Application.Main.Models.Rolls.DiceRollBase");

                    b.HasDiscriminator().HasValue("attackRollMelee");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.RangedAttackRoll", b =>
                {
                    b.HasBaseType("Dnd.Application.Main.Models.Rolls.DiceRollBase");

                    b.HasDiscriminator().HasValue("attackRollRanged");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.SavingThrowRoll", b =>
                {
                    b.HasBaseType("Dnd.Application.Main.Models.Rolls.DiceRollBase");

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Rolls", t =>
                        {
                            t.Property("Ability")
                                .HasColumnName("SavingThrowRoll_Ability");
                        });

                    b.HasDiscriminator().HasValue("savingThrow");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Rolls.SpellAttackRoll", b =>
                {
                    b.HasBaseType("Dnd.Application.Main.Models.Rolls.DiceRollBase");

                    b.HasDiscriminator().HasValue("spellAttackRoll");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Campaigns.Campaign", b =>
                {
                    b.HasOne("Dnd.Application.Main.Models.Users.DomainUser", "DungeonMaster")
                        .WithMany("CampaignsDmed")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dnd.Application.Main.Models.Users.DomainUser", "Owner")
                        .WithMany("CampaignsOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DungeonMaster");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Characters.Character", b =>
                {
                    b.HasOne("Dnd.Application.Main.Models.Characters.CharacterStats", "Stats")
                        .WithOne("Character")
                        .HasForeignKey("Dnd.Application.Main.Models.Characters.Character", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dnd.Application.Main.Models.Users.DomainUser", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stats");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Intermediate.UserCharacterCampaign", b =>
                {
                    b.HasOne("Dnd.Application.Main.Models.Users.DomainUser", "_User")
                        .WithMany("CampaignsPlayed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_User");
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Characters.CharacterStats", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();
                });

            modelBuilder.Entity("Dnd.Application.Main.Models.Users.DomainUser", b =>
                {
                    b.Navigation("CampaignsDmed");

                    b.Navigation("CampaignsOwned");

                    b.Navigation("CampaignsPlayed");

                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
